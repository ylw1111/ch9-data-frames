# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- ("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- ("Employee" 1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- ("Employee" 1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- ("Employee",1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- ("Employee", 1:100)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
view(salaries)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries_2018 - salaries_2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- ('Employee', 1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- ("Employee" 1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- ("Employee", 1:100)
# What was the "name" of the employee who received the highest raise?
got_biggest_raise <- salaries[salaries$change == biggest_paycut, "employees"]
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries_2018 - salaries_2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
# What was the 2018 salary of employee 57
salary_57 <- salaries[salaries$employees == "Employee57"]
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$change)
# What was the "name" of the employee who received the highest raise?
got_biggest_raise <- salaries[salaries$change == biggest_paycut, "employees"]
saetbelt_data <- data.frame(Seatbelts, stringsAsFactors = FALSE)
library("mlbench")
data(BostonHousing)
library(mlbench)
setwd("~/Desktop/INFO201B/in-class")
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
US_Personal <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
is.data.frame(US_Personal)
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
US_Personal <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
read.table(US_Personal)
# What are the column names of your dataframe?
read.csv(US_Personal)
# What are the column names of your dataframe?
read.csv(US_Personal.R)
# What are the column names of your dataframe?
read.csv(US_Personal.cvs)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
US_Personal <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
read.csv(US_Personal, header = TRUE)
?read.csv
# What are the column names of your dataframe?
read.csv(US_Personal.cvs, header = TRUE)
setwd("~/Desktop/INFO201B/in-class/ch9-data-frames/exercise-3")
# What are the column names of your dataframe?
read.csv(US_Personal.csv, header = TRUE)
# What are the column names of your dataframe?
read.csv(~/Desktop/INFO201B/in-class/ch9-data-frames/exercise-3, header = TRUE)
# What are the column names of your dataframe?
read.csv(~/Desktop/INFO201B/in-class/ch9-data-frames/exercise-3/, header = TRUE)
# What are the column names of your dataframe?
read.csv(~/Desktop/INFO201B/in-class/ch9-data-frames/exercise-3, header = TRUE)
# What are the column names of your dataframe?
read.csv(Desktop/INFO201B/in-class/ch9-data-frames/exercise-3, header = TRUE)
# What are the column names of your dataframe?
read_US_Personal <- read.csv(Desktop/INFO201B/in-class/ch9-data-frames/exercise-3, header = TRUE)
# What are the column names of your dataframe?
read_US_Personal <- read.csv(Desktop/INFO201B/in-class/ch9-data-frames/exercise-3, header = TRUE)
setwd("~/Desktop/INFO201B/in-class/ch9-data-frames/exercise-3")
# What are the column names of your dataframe?
read_US_Personal <- read.csv(USPersonalExpenditure.csv, header = TRUE)
# What are the column names of your dataframe?
colnames(US_Personal)
# What are the row names of your dataframe?
row.names(US_Personal)
# Add a column "category" to your data frame that contains the rownames
US_Personal$category <- row.names(US_Personal)
# How much money was spent on personal care in 1940?
US_Personal$X1940
# How much money was spent on personal care in 1940?
US_Personal$X1940, 4
# How much money was spent on personal care in 1940?
US_Personal[[X1940, 4]]
# How much money was spent on personal care in 1940?
US_Personal[["X1940", "4"]]
# How much money was spent on personal care in 1940?
care_1940 <- US_Personal["Personal Care", "X1940"]
# What was the highest expenditure category in 1960?
highest_1960 <- US_Personal$category[US_Personal$X1960 == max(US_Persona$X1960)]
# What was the highest expenditure category in 1960?
highest_1960 <- US_Personal$category[US_Personal$X1960 == max(US_Personal$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
col <- paste0("X", year)
US_Personal$category[US_Personal[, col] == min(US_Personal[, col])]
}
year <- 1960
# How much money was spent on Food and Tobacco in 1960?
food_1960 <- US_Personal["Food and Tobacco", "X1960"]
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- saplly(seq(1940, 1960, 5))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- saply(seq(1940, 1960, 5))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940, 1960, 5), lowest_category)
setwd("~/Desktop/INFO201B/in-class/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(~/Desktop/INFO201B/in-class/ch9-data-frames/exercise-4/data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv("~/Desktop/INFO201B/in-class/ch9-data-frames/exercise-4/data/gates_money.csv")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv("~/Desktop/INFO201B/in-class/ch9-data-frames/exercise-4/data/gates_money.csv", stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
gates_money <- read.csv("~/Desktop/INFO201B/in-class/ch9-data-frames/exercise-4/data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(gates_money)
# Create a variable `organization` that contains the `organization` column of
# the dataset
gates_money$organization
# Create a variable `organization` that contains the `organization` column of
# the dataset
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- gates_money[, "organization"]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vactor(organization)
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean_grant <- mean(gates_money$total_amount)
# What was the dollar amount of the largest grant?
largest_grant <- max(gates_money$total_amount)
# What was the dollar amount of the smallest grant?
smallest_grant <- min(gates_money$total_amount)
View(organization)
# Which organization received the largest grant?
largest_organization <- gates_money$organization[gates_money$total_amount == max(gates_money$total_amount)]
# Which organization received the smallest grant?
smallest_organization <- gates_money$organization[gates_money$total_amount == min(gates_money$total_amount)]
# How many grants were awarded in 2010?
grants_awarded <- gates_money$grant_title == sum(gates_money$grant_title)
# How many grants were awarded in 2010?
grants_awarded <- gates_money$grant_title[gates_money$grant_title == sum(gates_money$grant_title)]
# How many grants were awarded in 2010?
grants_awarded <- sum(gates_money$grant_title)
# How many grants were awarded in 2010?
grants_awarded <- sum("gates_money$grant_title")
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- gates_money$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# Which organization received the largest grant?
largest_organization <- organization[gates_money$total_amount == highest_amount]
# How many grants were awarded in 2010?
grants_awarded <- length(gates_money$total_amount[gates_money$start_year == 2010])
